{"version":3,"sources":["frontend-config.ts","events-explorer-page.tsx","App.tsx","serviceWorker.ts","index.tsx","stores.ts","events.ts"],"names":["FrontendConfig","process","REACT_APP_API_URL","ErrorMsg","props","className","err","toString","EtherscanAddressLink","target","href","addr","caption","EtherscanBlockLink","block","EtherscanTxnLink","txn","LoadingMsg","ADDR_PATTERN","EventsExplorerPage","inject","observer","eventNameInput","searchTextInput","this","events","load","params","URLSearchParams","window","location","search","value","get","offset","parseInt","limit","onpopstate","eventsStore","syncStatus","remainingBlocks","latestBlock","topSyncedBlock","src","style","fontSize","marginLeft","fontWeight","flex","IconButton","aria-label","onClick","color","loading","error","onSubmit","e","preventDefault","id","eventNames","sort","map","name","ref","placeholder","list","type","position","width","height","tabIndex","TablePagination","rowsPerPageOptions","component","count","totalEvents","rowsPerPage","page","onChangePage","onChangeRowsPerPage","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","event","hover","role","display","paddingTop","moment","event_timestamp_seconds","format","block_number","tx_hash","contract_address","s","lookupAddress","toUpperCase","slice","event_name","renderEventData","eventName","trim","searchText","parsed","maxWidth","data","vals","_","parsed_data","length","filter","x","Array","isArray","isTabular","enriched","Object","keys","k","toLowerCase","total","v","Math","floor","enrichTabular","size","apply","values","renderValue","lookup","ethereumAddr","exec","padding","React","App","Boolean","hostname","match","stores","set","history","pushState","pathname","setQueryParams","qs","getQuerystring","loadAddressLookup","loadEventNames","loadSyncStatus","fetch","r","json","lookups","lookupMap","l","address","addressLookup","observable","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4c691091.chunk.js","sourcesContent":["export const FrontendConfig = {\n    ApiBaseUrl: process.env.REACT_APP_API_URL || \"http://localhost:8123/api\",\n    FrontendBaseUrl: process.env.PUBLIC_URL || \"http://localhost:3000\"\n}","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport moment from \"moment\";\nimport {inject, observer} from \"mobx-react\";\nimport {Events} from \"./events\";\nimport './events-page.css';\nimport {FrontendConfig} from \"./frontend-config\";\nimport {\n    IconButton,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow\n} from \"@material-ui/core\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport {IEvent} from \"../../types\";\nimport RefreshIcon from '@material-ui/icons/Refresh';\n\nconst capitalize = (s: string) => s == \"\" ? s : s[0].toUpperCase() + s.slice(1);\n\nconst ErrorMsg = (props: {err: Error}) => <div className=\"error-msg-container\">\n    <div className=\"error-header\">Error loading events</div>\n    <div className=\"error-txt\">{props.err.toString()}</div>\n</div>;\n\nconst EtherscanAddressLink = (props: {addr: string, caption?: string}) => (<a target=\"_blank\" href={\"https://etherscan.io/address/\" + props.addr}>{props.caption || props.addr}</a>);\nconst EtherscanBlockLink = (props: {block: number, caption?: string}) => (<a target=\"_blank\" href={\"https://etherscan.io/block/\" + props.block.toString()}>{props.caption || '#' + props.block}</a>);\nconst EtherscanTxnLink = (props: {txn: string, caption?: string}) => (<a target=\"_blank\" href={\"https://etherscan.io/tx/\" + props.txn.toString()}>{props.caption || props.txn}</a>);\n\nconst LoadingMsg = () => <div className={\"loading-msg\"}><span>Loading..</span></div>\n\nfunction isTabular(event: IEvent): boolean {\n    const vals = _.values(event.parsed_data);\n    return vals.length != 0 &&\n        vals.filter(x => !Array.isArray(x)).length == 0 &&\n        vals.filter(x => x.length != vals[0].length).length == 0\n}\n\nconst ADDR_PATTERN = /^0x[0-9a-fA-F]{40}$/\nconst isAddress = (addr: string) => ADDR_PATTERN.exec(addr);\n\nfunction enrichTabular(data: any) {\n    const enriched: any = {};\n    for (const k of Object.keys(data)) {\n        enriched[k] = data[k];\n        if (k.toLowerCase() == \"weights\") {\n            const total = _.sum(enriched[k].map((v: string) => parseInt(v)));\n            enriched[k] = enriched[k].map((v: string) => `${v} (${Math.floor(parseInt(v) / total * 100)}%)`);\n        }\n    }\n    return enriched;\n}\n\n@inject(\"events\")\n@observer\nexport class EventsExplorerPage extends React.Component<{events?: Events}, {}> {\n    private eventNameInput: HTMLInputElement;\n    private searchTextInput: HTMLInputElement;\n\n    componentWillMount() {\n        this.props.events.load();\n    }\n\n    componentDidMount() {\n        const load = () => {\n            const params = new URLSearchParams(window.location.search);\n            this.searchTextInput.value = params.get(\"searchText\") || \"\";\n            this.eventNameInput.value = params.get(\"eventName\") || \"\";\n            this.props.events.offset = parseInt(params.get(\"offset\")) || 0;\n            this.props.events.limit = parseInt(params.get(\"limit\")) || 10;\n            this.search();\n        }\n        load();\n        window.onpopstate = () => {\n            load();\n        };\n    }\n\n    render() {\n        const eventsStore = this.props.events;\n        const {syncStatus} = eventsStore;\n        const remainingBlocks = syncStatus != null ? syncStatus.latestBlock - syncStatus.topSyncedBlock : 0;\n        return <div>\n            <div className=\"header\">\n                <img src={FrontendConfig.FrontendBaseUrl + '/orbs-logo.svg'}/>\n                <span style={{fontSize: 53}}>ORBS v2</span>\n                <span style={{fontSize: 53, marginLeft: 40, fontWeight: \"normal\"}}>Event Explorer</span>\n                <div style={{flex: 1}}></div>\n                {syncStatus && <span style={{fontSize: 15}}>\n                    {remainingBlocks > 10 ?\n                        <span>Sync status: {remainingBlocks} blocks remaining</span>\n                        :\n                        <span>Sync status: complete</span>\n                    }\n                    <IconButton aria-label=\"Refresh\" onClick={() => this.search()}>\n                        <RefreshIcon style={{color: \"white\"}}/>\n                    </IconButton>\n                </span>}\n            </div>\n\n            <div className=\"events-body\">\n                {eventsStore.loading && <LoadingMsg/>}\n                {eventsStore.error && <ErrorMsg err={eventsStore.error}/>}\n                <div className=\"search-box\">\n                    <form onSubmit={(e) => {e.preventDefault(); this.search()}}>\n                        <span>Filter by &nbsp;</span>\n                        <datalist id={\"events-list\"}>\n                            {eventsStore.eventNames.sort().map(name => <option value={name}/>)}\n                        </datalist>\n                        <input ref={e => this.eventNameInput = e} placeholder={\"Event Name\"} list={\"events-list\"}/>\n                        <span>&nbsp;and/or&nbsp;</span>\n                        <input ref={e => this.searchTextInput = e} placeholder={\"Address, Number, Text, etc..\"}/>\n                        <IconButton aria-label=\"Search\" onClick={() => this.search()}>\n                            <SearchIcon/>\n                        </IconButton>\n                        <input type=\"submit\"\n                               style={{position: \"absolute\", \"left\": -9999, width: 1, height: 1}}\n                               tabIndex={-1}/>\n                        <TablePagination className={\"table-pagination\"}\n                                         rowsPerPageOptions={[5]}\n                                         component=\"span\"\n                                         count={eventsStore.totalEvents || -1}\n                                         rowsPerPage={eventsStore.limit}\n                                         page={eventsStore.offset / eventsStore.limit}\n                                         onChangePage={(e, page: number) => { eventsStore.offset = eventsStore.limit * page; eventsStore.load() }}\n                                         onChangeRowsPerPage={() => {}}\n                        />\n                    </form>\n                </div>\n                <div className=\"events-container\">\n                    <TableContainer className={\"events-table\"}>\n                        <Table stickyHeader aria-label=\"sticky table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Timestamp</TableCell>\n                                    <TableCell>Contract</TableCell>\n                                    <TableCell>Event</TableCell>\n                                    <TableCell>Data</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                { eventsStore.events.map(event =>\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1}>\n                                        <TableCell>\n                                            <div style={{display: \"inlineBlock\", paddingTop: 17}}>\n                                                {moment(event.event_timestamp_seconds * 1000).format(\"MMMM Do YYYY, hh:mm:ss\")}<br/>\n                                                <span className={\"block-span\"} style={{fontSize: 12}}> Block <EtherscanBlockLink block={event.block_number}/>&nbsp;&nbsp;&nbsp;</span><EtherscanTxnLink txn={event.tx_hash} caption={\"Txn\"}/>\n                                            </div>\n                                        </TableCell>\n                                        <TableCell><EtherscanAddressLink addr={event.contract_address} caption={capitalize((eventsStore.lookupAddress(event.contract_address) || {name: \"<unknown>\"}).name)}/></TableCell>\n                                        <TableCell><span style={{fontSize: 20, fontWeight: 500}}>{event.event_name}</span></TableCell>\n                                        <TableCell>{this.renderEventData(event)}</TableCell>\n                                    </TableRow>\n                                )}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </div>\n            </div>\n        </div>\n    }\n\n    private search() {\n        const eventsStore = this.props.events;\n        eventsStore.offset = 0;\n        eventsStore.eventName = this.eventNameInput.value.trim();\n        eventsStore.searchText = this.searchTextInput.value.trim();\n        eventsStore.load();\n    }\n\n    private renderEventData(event: IEvent){\n        if (!event.parsed) {\n            return <pre style={{display: 'inline-block', maxWidth: 150}}>{event.data}</pre>\n        }\n\n        if (isTabular(event)) {\n            const data = enrichTabular(event.parsed_data);\n            const keys = Object.keys(data);\n            return <Table className={\"tabular-event-data\"} size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        {keys.map(k => <TableCell>{k}</TableCell>)}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                {\n                    _.zip.apply(null, keys.map(k => data[k]))\n                        .map(values =>\n                            <TableRow>\n                                {values.map(v => <TableCell>{this.renderValue(v.toString())}</TableCell>)}\n                            </TableRow>\n                        )\n                }\n                </TableBody>\n            </Table>\n        }\n        return <Table size=\"small\" className={\"tabular-event-data\"}>\n            <TableBody>{\n            Object.keys(event.parsed_data).map(\n                k => <TableRow>\n                    <TableCell><span style={{fontWeight: 500}}>{k}</span></TableCell>\n                    <TableCell>{this.renderValue(event.parsed_data[k].toString())}</TableCell>\n                </TableRow>\n            )}\n            </TableBody>\n        </Table>\n    }\n\n    private renderValue(value: string) {\n        const lookup = this.props.events.lookupAddress(value);\n        return <span>\n            {lookup != null ?\n                <span>{lookup.name} {this.ethereumAddr(value)}</span>\n                :\n                isAddress(value) ?\n                    this.ethereumAddr(value)\n                    :\n                    value\n            }\n        </span>\n    }\n\n    private ethereumAddr(addr: string) {\n        return <span>\n            <EtherscanAddressLink addr={addr}/>\n            <IconButton style={{padding: \"0 0 0 5px\"}}>\n                <SearchIcon onClick={() => {\n                    this.searchTextInput.value = addr;\n                    this.search();\n                }}/>\n            </IconButton>\n        </span>\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {EventsExplorerPage} from \"./events-explorer-page\";\n\nfunction App() {\n  return <EventsExplorerPage/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"mobx-react\";\nimport {createStores} from \"./stores\";\n\nconst stores = createStores();\n(window as any).stores = stores;\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider {...stores}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {Events} from \"./events\";\n\nexport interface IStores {\n    events: Events\n}\n\nexport function createStores(): IStores {\n    return {\n        events: new Events()\n    }\n}","import {observable} from \"mobx\";\n\nimport {FrontendConfig} from \"./frontend-config\";\nimport {IAddressLookup, IEvent} from \"../../types\";\n\nexport class Events {\n\n    offset: number = 0;\n    limit: number = 10;\n    searchText: string = \"\";\n    eventName: string = \"\";\n\n    @observable loading: boolean = true;\n    @observable error: Error = null;\n    @observable events: IEvent[] = [];\n    @observable totalEvents: number;\n    @observable addressLookup: {[address: string]: IAddressLookup} = {};\n    @observable eventNames: string[] = [];\n    @observable syncStatus: {latestBlock: number, topSyncedBlock: number} = null;\n\n    constructor() {\n    }\n\n    setQueryParams() {\n        const params = new URLSearchParams(window.location.search);\n        params.set(\"offset\", this.offset.toString());\n        params.set(\"limit\", this.limit.toString());\n        params.set(\"searchText\", this.searchText.toString());\n        params.set(\"eventName\", this.eventName.toString());\n        if (params.toString() != window.location.search) {\n            window.history.pushState({}, null, window.location.pathname + '?' + params.toString());\n        }\n    }\n\n    async load() {\n        this.setQueryParams();\n\n        this.loading = true;\n        this.error = null;\n        this.events = [];\n\n        try {\n            const qs = this.getQuerystring();\n            await this.loadAddressLookup();\n            await this.loadEventNames();\n            await this.loadSyncStatus();\n            const r = await fetch(FrontendConfig.ApiBaseUrl + '/events?' + qs);\n            if (this.getQuerystring() == qs) {\n                const data = await r.json();\n                this.events = data.events;\n                this.totalEvents = data.total;\n            }\n\n        } catch (e) {\n            this.error = e;\n        }\n\n        this.loading = false;\n    }\n\n    async loadAddressLookup() {\n        const r = await fetch(FrontendConfig.ApiBaseUrl + '/address_lookup');\n        const lookups: IAddressLookup[] = await r.json();\n        const lookupMap: Events[\"addressLookup\"] = {};\n        for (const l of lookups) {\n            lookupMap[l.address.toLowerCase()] = l;\n        }\n        this.addressLookup = lookupMap;\n    }\n\n    async loadEventNames() {\n        const r = await fetch(FrontendConfig.ApiBaseUrl + '/event_names');\n        this.eventNames = await r.json();\n    }\n\n    async loadSyncStatus() {\n        const r = await fetch(FrontendConfig.ApiBaseUrl + '/sync_status');\n        this.syncStatus = await r.json();\n    }\n\n    lookupAddress(address: string): IAddressLookup {\n        return this.addressLookup[address.toLowerCase()];\n    }\n\n    private getQuerystring(): string {\n        const params = new URLSearchParams(\"\");\n        params.set(\"offset\", this.offset.toString());\n        params.set(\"limit\", this.limit.toString());\n        if (this.searchText) {\n            params.set(\"searchText\", this.searchText);\n        }\n        if (this.eventName) {\n            params.set(\"eventName\", this.eventName);\n        }\n        return params.toString();\n    }\n\n}"],"sourceRoot":""}