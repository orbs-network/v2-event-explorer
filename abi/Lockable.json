{
  "contractName": "Lockable",
  "abi": [
    {
      "anonymous": false,
      "inputs": [],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousMigrationOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMigrationOwner",
          "type": "address"
        }
      ],
      "name": "MigrationOwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unlocked",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "claimMigrationOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isMigrationOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "migrationOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceMigrationOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newMigrationOwner",
          "type": "address"
        }
      ],
      "name": "transferMigrationOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMigrationOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMigrationOwner\",\"type\":\"address\"}],\"name\":\"MigrationOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimMigrationOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMigrationOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMigrationOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMigrationOwner\",\"type\":\"address\"}],\"name\":\"transferMigrationOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension for the Ownable contract, where the ownership needs to be claimed. This allows the new owner to accept the transfer.\",\"methods\":{\"claimMigrationOwnership()\":{\"details\":\"Allows the pendingMigrationOwner address to finalize the transfer.\"},\"isMigrationOwner()\":{\"details\":\"Returns true if the caller is the current migrationOwner.\"},\"migrationOwner()\":{\"details\":\"Returns the address of the current migrationOwner.\"},\"renounceMigrationOwnership()\":{\"details\":\"Leaves the contract without migrationOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current migrationOwner.     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner, thereby removing any functionality that is only available to the migrationOwner.\"},\"transferMigrationOwnership(address)\":{\"details\":\"Allows the current migrationOwner to set the pendingOwner address.\",\"params\":{\"newMigrationOwner\":\"The address to transfer migrationOwnership to.\"}}},\"title\":\"Claimable\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/aviramstern/GolandProjects/orbs-ethereum-contracts-v2/contracts/Lockable.sol\":\"Lockable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/aviramstern/GolandProjects/orbs-ethereum-contracts-v2/contracts/Lockable.sol\":{\"keccak256\":\"0x7a0c66381019bae3ca7fac0c74fb41cd4094d81c7811525b9a244d7b50847db6\",\"urls\":[\"bzz-raw://e76b91cf340b0e7704c774af78f3ad040a1128663df990922a253cb51eb485e4\",\"dweb:/ipfs/QmcaGGiSX2ycgwNRLYvqYUJZgho4q58k4fXLgY8sqvNzNt\"]},\"/Users/aviramstern/GolandProjects/orbs-ethereum-contracts-v2/contracts/WithClaimableMigrationOwnership.sol\":{\"keccak256\":\"0x2fc5723c9ad17fc19ffdd33423a8d8c47b3fe3aaf023f51918af85b1687887fc\",\"urls\":[\"bzz-raw://4b7b6a22c7d0d60700d385fe4a1e5e2e23084ea1af353f5209030471b6acda50\",\"dweb:/ipfs/QmVLcZ3kdLZzExvPph6VDU8ULk7XG8fGDnW27xH4pHRkea\"]},\"@openzeppelin/contracts/GSN/Context.sol\":{\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\",\"urls\":[\"bzz-raw://216ef9d6b614db4eb46970b4e84903f2534a45572dd30a79f0041f1a5830f436\",\"dweb:/ipfs/QmNPrJ4MWKUAWzKXpUqeyKRUfosaoANZAqXgvepdrCwZAG\"]}},\"version\":1}",
  "bytecode": "0x608060405260006100176001600160e01b0361006616565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f7e8c4fc74f50849b4ec635ed03f5d13f87cd46ae422e97479704c6fd1c164e20908290a35061006a565b3390565b610536806100796000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639f587d1c1161005b5780639f587d1c146100df578063a69df4b514610105578063cf3090121461010d578063f83d08ba1461011557610088565b8063021abb931461008d578063209df1e2146100a95780632c43bdd5146100b35780637b93af4c146100d7575b600080fd5b61009561011d565b604080519115158252519081900360200190f35b6100b1610141565b005b6100bb6101ce565b604080516001600160a01b039092168252519081900360200190f35b6100b16101dd565b6100b1600480360360208110156100f557600080fd5b50356001600160a01b031661024d565b6100b16102b2565b61009561032d565b6100b161033d565b600080546001600160a01b03166101326103be565b6001600160a01b031614905090565b61014961011d565b6101845760405162461bcd60e51b81526004018080602001828103825260418152602001806104636041913960600191505060405180910390fd5b600080546040516001600160a01b03909116907f7e8c4fc74f50849b4ec635ed03f5d13f87cd46ae422e97479704c6fd1c164e20908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001546001600160a01b031633146102265760405162461bcd60e51b81526004018080602001828103825260288152602001806104a46028913960400191505060405180910390fd5b60015461023b906001600160a01b03166103c2565b600180546001600160a01b0319169055565b61025561011d565b6102905760405162461bcd60e51b81526004018080602001828103825260418152602001806104636041913960600191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6102ba61011d565b6102f55760405162461bcd60e51b81526004018080602001828103825260418152602001806104636041913960600191505060405180910390fd5b6001805460ff60a01b191690556040517f19aad37188a1d3921e29eb3c66acf43d81975e107cb650d58cca878627955fd690600090a1565b600154600160a01b900460ff1681565b61034561011d565b6103805760405162461bcd60e51b81526004018080602001828103825260418152602001806104636041913960600191505060405180910390fd5b6001805460ff60a01b1916600160a01b1790556040517f0f2e5b6c72c6a4491efd919a9f9a409f324ef0708c11ee57d410c2cb06c0992b90600090a1565b3390565b6001600160a01b0381166104075760405162461bcd60e51b81526004018080602001828103825260368152602001806104cc6036913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f7e8c4fc74f50849b4ec635ed03f5d13f87cd46ae422e97479704c6fd1c164e2091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe57697468436c61696d61626c654d6967726174696f6e4f776e6572736869703a2063616c6c6572206973206e6f7420746865206d6967726174696f6e4f776e657243616c6c6572206973206e6f74207468652070656e64696e67206d6967726174696f6e4f776e65724d6967726174696f6e4f776e65723a206e6577206d6967726174696f6e4f776e657220697320746865207a65726f2061646472657373a265627a7a7231582035140e1efdf7c14d99a83e8cbbf524999a2140ac60815a898071dd2aa8e70df864736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639f587d1c1161005b5780639f587d1c146100df578063a69df4b514610105578063cf3090121461010d578063f83d08ba1461011557610088565b8063021abb931461008d578063209df1e2146100a95780632c43bdd5146100b35780637b93af4c146100d7575b600080fd5b61009561011d565b604080519115158252519081900360200190f35b6100b1610141565b005b6100bb6101ce565b604080516001600160a01b039092168252519081900360200190f35b6100b16101dd565b6100b1600480360360208110156100f557600080fd5b50356001600160a01b031661024d565b6100b16102b2565b61009561032d565b6100b161033d565b600080546001600160a01b03166101326103be565b6001600160a01b031614905090565b61014961011d565b6101845760405162461bcd60e51b81526004018080602001828103825260418152602001806104636041913960600191505060405180910390fd5b600080546040516001600160a01b03909116907f7e8c4fc74f50849b4ec635ed03f5d13f87cd46ae422e97479704c6fd1c164e20908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001546001600160a01b031633146102265760405162461bcd60e51b81526004018080602001828103825260288152602001806104a46028913960400191505060405180910390fd5b60015461023b906001600160a01b03166103c2565b600180546001600160a01b0319169055565b61025561011d565b6102905760405162461bcd60e51b81526004018080602001828103825260418152602001806104636041913960600191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6102ba61011d565b6102f55760405162461bcd60e51b81526004018080602001828103825260418152602001806104636041913960600191505060405180910390fd5b6001805460ff60a01b191690556040517f19aad37188a1d3921e29eb3c66acf43d81975e107cb650d58cca878627955fd690600090a1565b600154600160a01b900460ff1681565b61034561011d565b6103805760405162461bcd60e51b81526004018080602001828103825260418152602001806104636041913960600191505060405180910390fd5b6001805460ff60a01b1916600160a01b1790556040517f0f2e5b6c72c6a4491efd919a9f9a409f324ef0708c11ee57d410c2cb06c0992b90600090a1565b3390565b6001600160a01b0381166104075760405162461bcd60e51b81526004018080602001828103825260368152602001806104cc6036913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f7e8c4fc74f50849b4ec635ed03f5d13f87cd46ae422e97479704c6fd1c164e2091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe57697468436c61696d61626c654d6967726174696f6e4f776e6572736869703a2063616c6c6572206973206e6f7420746865206d6967726174696f6e4f776e657243616c6c6572206973206e6f74207468652070656e64696e67206d6967726174696f6e4f776e65724d6967726174696f6e4f776e65723a206e6577206d6967726174696f6e4f776e657220697320746865207a65726f2061646472657373a265627a7a7231582035140e1efdf7c14d99a83e8cbbf524999a2140ac60815a898071dd2aa8e70df864736f6c63430005100032",
  "sourceMap": "241:453:11:-;;;638:17:20;658:12;-1:-1:-1;;;;;658:10:20;:12;:::i;:::-;680:15;:27;;-1:-1:-1;;;;;;680:27:20;-1:-1:-1;;;;;680:27:20;;;;;;;722:52;;680:27;;-1:-1:-1;680:27:20;722:52;;680:15;;722:52;604:177;241:453:11;;788:96:33;867:10;788:96;:::o;241:453:11:-;;;;;;;",
  "deployedSourceMap": "241:453:11:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;241:453:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1304:110:20;;;:::i;:::-;;;;;;;;;;;;;;;;;;1801:182;;;:::i;:::-;;866:95;;;:::i;:::-;;;;-1:-1:-1;;;;;866:95:20;;;;;;;;;;;;;;3089:181;;;:::i;2842:147::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2842:147:20;-1:-1:-1;;;;;2842:147:20;;:::i;472:102:11:-;;;:::i;301:18::-;;;:::i;369:97::-;;;:::i;1304:110:20:-;1353:4;1392:15;;-1:-1:-1;;;;;1392:15:20;1376:12;:10;:12::i;:::-;-1:-1:-1;;;;;1376:31:20;;1369:38;;1304:110;:::o;1801:182::-;1106:18;:16;:18::i;:::-;1098:96;;;;-1:-1:-1;;;1098:96:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1935:1;1910:15;;1880:58;;-1:-1:-1;;;;;1910:15:20;;;;1880:58;;1935:1;;1880:58;1974:1;1948:28;;-1:-1:-1;;;;;;1948:28:20;;;1801:182::o;866:95::-;913:7;939:15;-1:-1:-1;;;;;939:15:20;866:95;:::o;3089:181::-;2579:21;;-1:-1:-1;;;;;2579:21:20;2565:10;:35;2557:88;;;;-1:-1:-1;;;2557:88:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3197:21;;3169:50;;-1:-1:-1;;;;;3197:21:20;3169:27;:50::i;:::-;3229:21;:34;;-1:-1:-1;;;;;;3229:34:20;;;3089:181::o;2842:147::-;1106:18;:16;:18::i;:::-;1098:96;;;;-1:-1:-1;;;1098:96:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2941:21;:41;;-1:-1:-1;;;;;;2941:41:20;-1:-1:-1;;;;;2941:41:20;;;;;;;;;;2842:147::o;472:102:11:-;1106:18:20;:16;:18::i;:::-;1098:96;;;;-1:-1:-1;;;1098:96:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;528:6:11;:14;;-1:-1:-1;;;;528:14:11;;;557:10;;;;537:5;;557:10;472:102::o;301:18::-;;;-1:-1:-1;;;301:18:11;;;;;:::o;369:97::-;1106:18:20;:16;:18::i;:::-;1098:96;;;;-1:-1:-1;;;1098:96:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;432:4:11;423:13;;-1:-1:-1;;;;423:13:11;-1:-1:-1;;;423:13:11;;;451:8;;;;423:13;;451:8;369:97::o;788:96:33:-;867:10;788:96;:::o;2093:313:20:-;-1:-1:-1;;;;;2184:31:20;;2176:98;;;;-1:-1:-1;;;2176:98:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2319:15;;;2289:65;;-1:-1:-1;;;;;2289:65:20;;;;2319:15;;;2289:65;;;2364:15;:35;;-1:-1:-1;;;;;;2364:35:20;-1:-1:-1;;;;;2364:35:20;;;;;;;;;;2093:313::o",
  "source": "pragma solidity 0.5.16;\n\nimport \"./WithClaimableMigrationOwnership.sol\";\n\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Lockable is WithClaimableMigrationOwnership {\n\n    bool public locked;\n\n    event Locked();\n    event Unlocked();\n\n    function lock() external onlyMigrationOwner {\n        locked = true;\n        emit Locked();\n    }\n\n    function unlock() external onlyMigrationOwner {\n        locked = false;\n        emit Unlocked();\n    }\n\n    modifier onlyWhenActive() {\n        require(!locked, \"contract is locked for this operation\");\n\n        _;\n    }\n}\n",
  "sourcePath": "/Users/aviramstern/GolandProjects/orbs-ethereum-contracts-v2/contracts/Lockable.sol",
  "ast": {
    "absolutePath": "/Users/aviramstern/GolandProjects/orbs-ethereum-contracts-v2/contracts/Lockable.sol",
    "exportedSymbols": {
      "Lockable": [
        5071
      ]
    },
    "id": 5072,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5025,
        "literals": [
          "solidity",
          "0.5",
          ".16"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:11"
      },
      {
        "absolutePath": "/Users/aviramstern/GolandProjects/orbs-ethereum-contracts-v2/contracts/WithClaimableMigrationOwnership.sol",
        "file": "./WithClaimableMigrationOwnership.sol",
        "id": 5026,
        "nodeType": "ImportDirective",
        "scope": 5072,
        "sourceUnit": 9909,
        "src": "25:47:11",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5027,
              "name": "WithClaimableMigrationOwnership",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 9908,
              "src": "262:31:11",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_WithClaimableMigrationOwnership_$9908",
                "typeString": "contract WithClaimableMigrationOwnership"
              }
            },
            "id": 5028,
            "nodeType": "InheritanceSpecifier",
            "src": "262:31:11"
          }
        ],
        "contractDependencies": [
          9908,
          11099
        ],
        "contractKind": "contract",
        "documentation": "@title Claimable\n@dev Extension for the Ownable contract, where the ownership needs to be claimed.\nThis allows the new owner to accept the transfer.",
        "fullyImplemented": true,
        "id": 5071,
        "linearizedBaseContracts": [
          5071,
          9908,
          11099
        ],
        "name": "Lockable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 5030,
            "name": "locked",
            "nodeType": "VariableDeclaration",
            "scope": 5071,
            "src": "301:18:11",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 5029,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "301:4:11",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 5032,
            "name": "Locked",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5031,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "338:2:11"
            },
            "src": "326:15:11"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 5034,
            "name": "Unlocked",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5033,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "360:2:11"
            },
            "src": "346:17:11"
          },
          {
            "body": {
              "id": 5046,
              "nodeType": "Block",
              "src": "413:53:11",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 5041,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 5039,
                      "name": "locked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5030,
                      "src": "423:6:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 5040,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "432:4:11",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "423:13:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 5042,
                  "nodeType": "ExpressionStatement",
                  "src": "423:13:11"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 5043,
                      "name": "Locked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5032,
                      "src": "451:6:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 5044,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "451:8:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5045,
                  "nodeType": "EmitStatement",
                  "src": "446:13:11"
                }
              ]
            },
            "documentation": null,
            "id": 5047,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 5037,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 5036,
                  "name": "onlyMigrationOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 9813,
                  "src": "394:18:11",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "394:18:11"
              }
            ],
            "name": "lock",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5035,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "382:2:11"
            },
            "returnParameters": {
              "id": 5038,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "413:0:11"
            },
            "scope": 5071,
            "src": "369:97:11",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 5059,
              "nodeType": "Block",
              "src": "518:56:11",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 5054,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 5052,
                      "name": "locked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5030,
                      "src": "528:6:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "66616c7365",
                      "id": 5053,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "537:5:11",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "528:14:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 5055,
                  "nodeType": "ExpressionStatement",
                  "src": "528:14:11"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 5056,
                      "name": "Unlocked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5034,
                      "src": "557:8:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 5057,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "557:10:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5058,
                  "nodeType": "EmitStatement",
                  "src": "552:15:11"
                }
              ]
            },
            "documentation": null,
            "id": 5060,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 5050,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 5049,
                  "name": "onlyMigrationOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 9813,
                  "src": "499:18:11",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "499:18:11"
              }
            ],
            "name": "unlock",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5048,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "487:2:11"
            },
            "returnParameters": {
              "id": 5051,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "518:0:11"
            },
            "scope": 5071,
            "src": "472:102:11",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 5069,
              "nodeType": "Block",
              "src": "606:86:11",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 5064,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "624:7:11",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 5063,
                          "name": "locked",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5030,
                          "src": "625:6:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "636f6e7472616374206973206c6f636b656420666f722074686973206f7065726174696f6e",
                        "id": 5065,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "633:39:11",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_185d1b3f2487a494b66ff3c6d1be4184534d1d5e4430be954efab95eae565d28",
                          "typeString": "literal_string \"contract is locked for this operation\""
                        },
                        "value": "contract is locked for this operation"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_185d1b3f2487a494b66ff3c6d1be4184534d1d5e4430be954efab95eae565d28",
                          "typeString": "literal_string \"contract is locked for this operation\""
                        }
                      ],
                      "id": 5062,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        12171,
                        12172
                      ],
                      "referencedDeclaration": 12172,
                      "src": "616:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 5066,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "616:57:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5067,
                  "nodeType": "ExpressionStatement",
                  "src": "616:57:11"
                },
                {
                  "id": 5068,
                  "nodeType": "PlaceholderStatement",
                  "src": "684:1:11"
                }
              ]
            },
            "documentation": null,
            "id": 5070,
            "name": "onlyWhenActive",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 5061,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "603:2:11"
            },
            "src": "580:112:11",
            "visibility": "internal"
          }
        ],
        "scope": 5072,
        "src": "241:453:11"
      }
    ],
    "src": "0:695:11"
  },
  "legacyAST": {
    "absolutePath": "/Users/aviramstern/GolandProjects/orbs-ethereum-contracts-v2/contracts/Lockable.sol",
    "exportedSymbols": {
      "Lockable": [
        5071
      ]
    },
    "id": 5072,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5025,
        "literals": [
          "solidity",
          "0.5",
          ".16"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:11"
      },
      {
        "absolutePath": "/Users/aviramstern/GolandProjects/orbs-ethereum-contracts-v2/contracts/WithClaimableMigrationOwnership.sol",
        "file": "./WithClaimableMigrationOwnership.sol",
        "id": 5026,
        "nodeType": "ImportDirective",
        "scope": 5072,
        "sourceUnit": 9909,
        "src": "25:47:11",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5027,
              "name": "WithClaimableMigrationOwnership",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 9908,
              "src": "262:31:11",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_WithClaimableMigrationOwnership_$9908",
                "typeString": "contract WithClaimableMigrationOwnership"
              }
            },
            "id": 5028,
            "nodeType": "InheritanceSpecifier",
            "src": "262:31:11"
          }
        ],
        "contractDependencies": [
          9908,
          11099
        ],
        "contractKind": "contract",
        "documentation": "@title Claimable\n@dev Extension for the Ownable contract, where the ownership needs to be claimed.\nThis allows the new owner to accept the transfer.",
        "fullyImplemented": true,
        "id": 5071,
        "linearizedBaseContracts": [
          5071,
          9908,
          11099
        ],
        "name": "Lockable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 5030,
            "name": "locked",
            "nodeType": "VariableDeclaration",
            "scope": 5071,
            "src": "301:18:11",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 5029,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "301:4:11",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 5032,
            "name": "Locked",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5031,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "338:2:11"
            },
            "src": "326:15:11"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 5034,
            "name": "Unlocked",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5033,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "360:2:11"
            },
            "src": "346:17:11"
          },
          {
            "body": {
              "id": 5046,
              "nodeType": "Block",
              "src": "413:53:11",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 5041,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 5039,
                      "name": "locked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5030,
                      "src": "423:6:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 5040,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "432:4:11",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "423:13:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 5042,
                  "nodeType": "ExpressionStatement",
                  "src": "423:13:11"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 5043,
                      "name": "Locked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5032,
                      "src": "451:6:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 5044,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "451:8:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5045,
                  "nodeType": "EmitStatement",
                  "src": "446:13:11"
                }
              ]
            },
            "documentation": null,
            "id": 5047,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 5037,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 5036,
                  "name": "onlyMigrationOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 9813,
                  "src": "394:18:11",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "394:18:11"
              }
            ],
            "name": "lock",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5035,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "382:2:11"
            },
            "returnParameters": {
              "id": 5038,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "413:0:11"
            },
            "scope": 5071,
            "src": "369:97:11",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 5059,
              "nodeType": "Block",
              "src": "518:56:11",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 5054,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 5052,
                      "name": "locked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5030,
                      "src": "528:6:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "66616c7365",
                      "id": 5053,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "537:5:11",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "528:14:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 5055,
                  "nodeType": "ExpressionStatement",
                  "src": "528:14:11"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 5056,
                      "name": "Unlocked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5034,
                      "src": "557:8:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 5057,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "557:10:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5058,
                  "nodeType": "EmitStatement",
                  "src": "552:15:11"
                }
              ]
            },
            "documentation": null,
            "id": 5060,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 5050,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 5049,
                  "name": "onlyMigrationOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 9813,
                  "src": "499:18:11",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "499:18:11"
              }
            ],
            "name": "unlock",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5048,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "487:2:11"
            },
            "returnParameters": {
              "id": 5051,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "518:0:11"
            },
            "scope": 5071,
            "src": "472:102:11",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 5069,
              "nodeType": "Block",
              "src": "606:86:11",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 5064,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "624:7:11",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 5063,
                          "name": "locked",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5030,
                          "src": "625:6:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "636f6e7472616374206973206c6f636b656420666f722074686973206f7065726174696f6e",
                        "id": 5065,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "633:39:11",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_185d1b3f2487a494b66ff3c6d1be4184534d1d5e4430be954efab95eae565d28",
                          "typeString": "literal_string \"contract is locked for this operation\""
                        },
                        "value": "contract is locked for this operation"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_185d1b3f2487a494b66ff3c6d1be4184534d1d5e4430be954efab95eae565d28",
                          "typeString": "literal_string \"contract is locked for this operation\""
                        }
                      ],
                      "id": 5062,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        12171,
                        12172
                      ],
                      "referencedDeclaration": 12172,
                      "src": "616:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 5066,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "616:57:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5067,
                  "nodeType": "ExpressionStatement",
                  "src": "616:57:11"
                },
                {
                  "id": 5068,
                  "nodeType": "PlaceholderStatement",
                  "src": "684:1:11"
                }
              ]
            },
            "documentation": null,
            "id": 5070,
            "name": "onlyWhenActive",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 5061,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "603:2:11"
            },
            "src": "580:112:11",
            "visibility": "internal"
          }
        ],
        "scope": 5072,
        "src": "241:453:11"
      }
    ],
    "src": "0:695:11"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-07-27T07:33:26.896Z",
  "devdoc": {
    "details": "Extension for the Ownable contract, where the ownership needs to be claimed. This allows the new owner to accept the transfer.",
    "methods": {
      "claimMigrationOwnership()": {
        "details": "Allows the pendingMigrationOwner address to finalize the transfer."
      },
      "isMigrationOwner()": {
        "details": "Returns true if the caller is the current migrationOwner."
      },
      "migrationOwner()": {
        "details": "Returns the address of the current migrationOwner."
      },
      "renounceMigrationOwnership()": {
        "details": "Leaves the contract without migrationOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current migrationOwner.     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner, thereby removing any functionality that is only available to the migrationOwner."
      },
      "transferMigrationOwnership(address)": {
        "details": "Allows the current migrationOwner to set the pendingOwner address.",
        "params": {
          "newMigrationOwner": "The address to transfer migrationOwnership to."
        }
      }
    },
    "title": "Claimable"
  },
  "userdoc": {
    "methods": {}
  }
}